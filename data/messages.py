def format_switch_state_message(
    prev_state: str,
    new_state: str,
    prev_tag: str,
    new_tag: str,
    delta_time: str
) -> str:
    return f"""‚ú® <b>–°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–∞!</b>

‚ñ´Ô∏è <b>–ë—ã–ª–æ:</b> <code>{prev_state}</code> <code>{prev_tag if prev_tag else ''}</code>
‚ñ´Ô∏è <b>–°—Ç–∞–ª–æ:</b> <code>{new_state}</code> <code>{new_tag if new_tag else ''}</code>

üïê <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> <i>{delta_time}</i>"""


def format_states_history(states: list[dict]) -> str:
    if not states:
        return "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É—Å—Ç–∞"

    ret_str = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:</b>\n\n"

    for i, state in enumerate(states):
        state_name = state["state_name"]
        duration_seconds = state.get("duration_seconds", 0)
        mood = state.get("mood")
        tag = state.get("tag", "")

        if duration_seconds:
            hours = duration_seconds // 3600
            minutes = (duration_seconds // 60) % 60
            seconds = duration_seconds % 60
            duration_str = f"{f'{str(hours)}—á ' if hours >= 1 else ''}" \
                           f"{f'{str(minutes)}–º ' if minutes >= 1 else ''}" \
                           f"{f'{str(seconds)}—Å' if seconds >= 1 else ''}"
        else:
            duration_str = "‚è≥ –ê–∫—Ç–∏–≤–Ω–æ"

        mood_str = ""
        if '–ê–∫—Ç–∏–≤–Ω–æ' not in duration_str:
            mood_str = " | " + ("‚≠ê" * mood if mood else "‚ùå")

        tag_str = f"   üè∑Ô∏è {tag}\n" if tag else ""

        divide = "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî" if i < len(states) - 1 else ""

        ret_str += f"""{"üî∏" if i == 0 else "üîπ"} <b>{state_name}</b>
   ‚è±Ô∏è {duration_str} {mood_str}
{tag_str} {divide}\n\n"""

    return ret_str


def format_commands() -> str:
    ret = ""
    for en, ru in DEFAULT_STATES.items():
        ret += f"{ru[1]} <code>/{en}</code> - {ru[0]}\n"

    return ret


DEFAULT_STATES = {
    "study": ["—É—á–µ–±–∞", "üìö"],
    "work": ["—Ä–∞–±–æ—Ç–∞", "üíº"],
    "chill": ["–æ—Ç–¥—ã—Ö", "üèñ"],
    "sleep": ["—Å–æ–Ω", "üí§"],
    "wait": ["–æ–∂–∏–¥–∞–Ω–∏–µ", "üï∞"],
    "other": ["–¥—Ä—É–≥–æ–µ", "üíä"],
    "stop": ["–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å", "‚èπÔ∏è"]
}

COMMON = {
    'start_cmd':"üëã <b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏.</b>\n\n"
                "üìä –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: /work, /study, /sleep, /stop\n\n"
                "üîé –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help",
    'cancel_cmd': "‚ùå <b>–î–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.</b>",
    'help_cmd': f"""‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n{format_commands()}
üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üè∑Ô∏è /my_tags - –≤–∞—à–∏ —Ç–µ–≥–∏""",
    'rate_state': "‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>",
    'states_message': f"""‚ÑπÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n
{format_commands()}
–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –Ω–∞–ø–∏—Å–∞–≤ –µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:
<code>/—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–≥</code>
"""
}

SUCCESS = {
    'state_change': "‚úÖ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>",
    'state_rated': "‚≠ê <b>–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>"
}

FAILURE = {
    'state_change': "‚ùå <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>",
    'have_not_tags': """‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–µ–≥–æ–≤.</b>\n
–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –Ω–∞–ø–∏—Å–∞–≤ –µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:
<code>/—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–≥</code>"""
}

REPLY_KB = {
    'start_kb': {
        'set_state': 'üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        'statistics': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'history': 'üóÇ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π'
    }
}
